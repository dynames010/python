pyside2\pyqt5底层都是基于相同的qt库、发行公司不同
https://www.byhy.net/tut/py/gui/qt_05_4/

方法：
app.exe_()表示持续运行

QApplication 用作初始化操作，在创建控件对象前必须先创建

控件类：
需要创建该类对应的实例对象
QMainWindow 主窗口
QPlainTextEdit 文本框
QPushButton 按钮

控件对象的方法：
window.move()，设置了主窗口左上角的坐标位置
window.resize()，决定了窗口的宽高大小
textEdit.move()

显示：
window.show()

界面动作处理signal&slot
def handleCalc():
     print()
button.clicked.connect(handleCalc)

app.exec_()
相当于进入事件循环，持续显示界面

界面设计软件：QT designer
1、表格Table Widget，属性选项在编辑项目中
2、表格属性编辑器未找到开启或隐藏选项？

变成软件exe发布
pyinstaller test_pyqt.py --noconsole --hidden-import PySide2.QtXml


各控件动作：
1、选择
路径：filePath = QFileDialog.getExistingDirectory(self.ui, "选择存储路径")
单个文件：filePath, _  = QFileDialog.getOpenFileName(
            self.ui,             # 父窗口对象
            "选择你要上传的图片", # 标题
            r"d:\\data",        # 起始目录
            "图片类型 (*.png *.jpg *.bmp)" # 选择类型过滤项，过滤内容在括号中
        )
保存文件：filePath, _  = QFileDialog.getSaveFileName(
            self.ui,             # 父窗口对象
            "保存文件", # 标题
            r"d:\\data",        # 起始目录
            "json类型 (*.json)" # 选择类型过滤项，过滤内容在括号中
        )

下拉框：
添加多个选项：cbox.addItems(['byhy','白月黑羽','python教程'])
获取当前文本：cbox.currentText()

文本框：
信号处理：edit.textChanged.connect(handleTextChange)
设置内容：edit.setText('你好，白月黑羽')
添加文本内容：edit.insertPlainText('')
获取文本内容：edit.toPlainText()
设置提示内容：setPlaceholderText()
清除：edit.clear()

提示窗：
错误报告：
QMessageBox.critical(
    self.ui,
    '错误',
    '请选择爬取数据存储路径！')

警告：
QMessageBox.warning(
    self.ui,
    '阅读太快',
    '阅读客户协议必须超过1分钟')

信息提示：
QMessageBox.information(
    self.ui,
    '操作成功',
    '请继续下一步操作')
或
QMessageBox.about(
    self.ui,
    '操作成功',
    '请继续下一步操作')

确认继续：
choice = QMessageBox.question(
    self.ui,
    '确认',
    '确定要删除本文件吗？')

if choice == QMessageBox.Yes:
    print('你选择了yes')
if choice == QMessageBox.No:
    print('你选择了no')